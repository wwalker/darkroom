#!/usr/bin/env ruby

Thread.abort_on_exception = true

require 'i3ipc'

LIMIT=25
$inverted = false

class Status
  def initialize(state = false)
    @status = state
    @mutex = Mutex.new
  end

  def status?
    @mutex.synchronize { @status }
  end

  def status=(state)
      @mutex.synchronize do
        @status = !@status
      end
  end
end

def is_inverted?
  return $inverted
  map_data = `xcalib -a -p`
  return !map_data.match(/\A0 0 0/)
end

def get_blocks
  return [[0,0,959,539],[2860,0,3839,539],[0,1620,959,2159],[2860,1620,3839,2159]]
end

def get_current_brightness
  blocks = get_blocks
  current_brightness_data = `scrot /tmp/root.png ; convert /tmp/root.png -colorspace gray -format "%[fx:100*mean]" info:`
  return current_brightness_data.to_f
end

def invert_colormap
  `xcalib -a -i`
  #  `xrandr-invert-colors`
  $inverted = ! $inverted
end

needs_checked = Status.new(false)

i3 = I3Ipc::Connection.new
block = Proc.new do |reply|
  puts Time.now
  puts reply.change
  needs_checked.status = true
  sleep 0.050
end

i3.subscribe('window', block)
while true do
  sleep 0.050
  if needs_checked.status?
    needs_checked.status = false
    sleep 0.050
    inverted = is_inverted?
    brightness = get_current_brightness
    if (brightness < 20 and inverted) or (brightness > 80 and not inverted)
      invert_colormap
    end
  end
end
